<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Borris&#39;s Develope Blog</title>
    <link>https://borrischo.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>borris</description>
    <pubDate>Fri, 22 Mar 2019 06:42:14 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Java Develop Style</title>
      <link>https://borrischo.github.io/2019/03/2019-03-21-borris-java-code-style/</link>
      <guid>https://borrischo.github.io/2019/03/2019-03-21-borris-java-code-style/</guid>
      <pubDate>Tue, 19 Mar 2019 04:58:50 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h2&gt;&lt;p&gt;특수한 상황을 제외한 혼자서 프로그램들을 만들고 유지보수를 하는 상황은 거의 존재하지 않습니다.&lt;br&gt;여러 사람들끼리 같이 프
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><p>특수한 상황을 제외한 혼자서 프로그램들을 만들고 유지보수를 하는 상황은 거의 존재하지 않습니다.<br>여러 사람들끼리 같이 프로그램을 만들게 되면 규칙을 정하고 개발을 해야만 유지보수를 좀더 쉽게 할 수 있습니다.<br>이글은 Java개발에 있어서 아주 기초적인 규칙에 대해서 설명을 했으며, Google Java Style Guide와 거의 비슷합니다.</p><h2 id="코딩-우선-항목"><a href="#코딩-우선-항목" class="headerlink" title="코딩 우선 항목"></a>코딩 우선 항목</h2><p>코딩 우선 항목이란 개발하는데 있어서 꼭 생각해봐야 할 항목들을 의미합니다. 개발하는데 있어서 해당 항목을 참고로 개발을 진행 하셨으면 합니다.</p><h3 id="정확도"><a href="#정확도" class="headerlink" title="정확도"></a>정확도</h3><p>코드가 올바르게 동작하는지에 대한 항목입니다. 당연하게도 코드는 원하는 서비스를 이상없이 동작하는게 목적이지만 그러지 않은 경우가 있습니다.</p><h3 id="크기"><a href="#크기" class="headerlink" title="크기"></a>크기</h3><p>코드의 라인수를 의미하는게 아니라, 컴파일된 .Class파일의 사이즈를 의미합니다.</p><h3 id="속도"><a href="#속도" class="headerlink" title="속도"></a>속도</h3><p>CPU 사용치 기준으로 측정된 실행 속도와 사용자의 응답속도를 모두 포함합니다. 가이드상 충분히 빠른 코드를 만드는 것을 권고하지만 필요 이상으로 시간을 낭비할 필요는 없습니다.<br>아무튼 예를 들어서 5개 레코드를 정렬 한다면 Bubble Sort를 사용하고 백만건 이상의 레코드를 처리하려면 Quick Sort를 사용해야 합니다.</p><h3 id="견고성"><a href="#견고성" class="headerlink" title="견고성"></a>견고성</h3><p>잘못된 입력이나 조건에도 코드는 이상이 없어야 합니다. Exception Handler등을 이용해서 적절히 오류를 처리해야 하는 코드를 작성해야 합니다.</p><h3 id="안전성"><a href="#안전성" class="headerlink" title="안전성"></a>안전성</h3><p>버그를 발생시키지 않는 코드를 작성해야 합니다.</p><h3 id="시험가능성"><a href="#시험가능성" class="headerlink" title="시험가능성"></a>시험가능성</h3><p>Test하기 좋은 코드로 개발을 해야만 합니다. TDD방법론에 따라서 개발을 하며 만약 긴급을 요하는 상황이라면 넘어가셔도 됩니다.</p><h3 id="유지보수성"><a href="#유지보수성" class="headerlink" title="유지보수성"></a>유지보수성</h3><p>유지보수가 쉬운 코드를 만들어야 합니다. 유지보수가 쉬운 코드는 다음과 같은 특징을 지니고 있습니다.</p><ol><li>이해하기 쉬운 코드로 작성 (이해라는것은 개발하는 사람의 수준에 따라서 차이가 납니다.)</li><li>캡슐화 (본연의 해야할 기능을 충실히 실행하며 의도한것 외에 따른 곳에 영향을 주지 않는 코드를 만들어야 합니다.)</li><li>코드에 대한 문서화 (코드에 주석을 포함.)</li></ol><h3 id="단순성"><a href="#단순성" class="headerlink" title="단순성"></a>단순성</h3><p>설명이 없어도 이 코드가 무엇인지 알아볼 수 있어야 합니다. (수준에 따라서 차이가 있습니다.)</p><h3 id="재사용성"><a href="#재사용성" class="headerlink" title="재사용성"></a>재사용성</h3><p>현재 프로젝트가 아닌 다른 프로젝트에서도 코드가 이상 없이 동작할 수 있도록 설계를 해야 합니다.<br>이렇게 설계된 코드들은 일반적으로 50% 이상의 개발 속도를 제공합니다.</p><h2 id="프로그램-구성"><a href="#프로그램-구성" class="headerlink" title="프로그램 구성"></a>프로그램 구성</h2><h3 id="코드-구성항목-순서"><a href="#코드-구성항목-순서" class="headerlink" title="코드 구성항목 순서"></a>코드 구성항목 순서</h3><p>코드 구성항목 순서란 하나의 Java파일안에 존재하는 구성항목들의 순서를 의미합니다. 소스 파일은 하나의 public class이 존재해야 하고 추가적으로 non-public class들을 포함할 수 있습니다.<br>구성항목들은 다음과 같습니다.</p><ol><li>Package(패키지명)</li><li>Import절</li><li>Class정의<ul><li>Class header</li><li>Constants (final class variables) : public, protected, private </li><li>Public static inner classes</li><li>Protected inner classes, static 또는 반대</li><li>Private inner classes, static 또는 반대</li><li>Class variables (private only)</li><li>Fields (instance variables) (private only)</li><li>Constructors</li><li>기타 methods : method의 순서를 정할 때 (public, protected, private)는 무시하고 아래 가이드라인을 준수해야 합니다.<ul><li>관련된 메소들을 함께 묶어서 작성.</li><li>부모 클래스 함수를 Overriding할 때는 부모 클래스와 같은 순서.</li></ul></li></ul></li></ol><h3 id="Import절"><a href="#Import절" class="headerlink" title="Import절"></a>Import절</h3><p>소스는 Package구역과 Import구역 순서로 되어 있습니다.<br>Import된 항목들은 아스타(<em>)를 사용해서 해당 패키지의 모든 항목들을 선언할 수 있지만 아스타(</em>)를 사용하는 것은 옳지 않습니다.<br>import로 선언된 항목들은 명시적으로 나열해야 합니다.</p><h4 id="나쁜예"><a href="#나쁜예" class="headerlink" title="나쁜예"></a>나쁜예</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br></pre></td></tr></table></figure><h4 id="좋은예"><a href="#좋은예" class="headerlink" title="좋은예"></a>좋은예</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.*;</span><br></pre></td></tr></table></figure><p>참고로 내가 쓰지 않는 항목들이 import되어 있을 경우도 있는데 그럴 경우는 툴에서 단축키를 제공해준다.<br>Intellij같은 경우 Ctrl + Alt + o사용해서 코드 정렬을 도와줍니다.</p>]]></content:encoded>
      
      <comments>https://borrischo.github.io/2019/03/2019-03-21-borris-java-code-style/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
